name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # ================= Build & Test =================
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Mobifly2024
          POSTGRES_DB: fastapi
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install aiosqlite pytest

      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:Mobifly2024@localhost:5432/fastapi
        run: pytest -v

  # ================= Deploy =================
  deploy:
    runs-on: self-hosted
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Show workspace path
        shell: pwsh
        run: |
          Write-Host "Workspace: $env:GITHUB_WORKSPACE"

      - name: Cleanup previous deployment
        shell: pwsh
        run: |
          $deployPath = "D:\cd"
          Write-Host "Stopping any running Python/uvicorn processes..."
          Get-Process python -ErrorAction SilentlyContinue | Stop-Process -Force
          Write-Host "Ensure deploy folder exists..."
          if (-not (Test-Path $deployPath)) { New-Item -ItemType Directory -Path $deployPath | Out-Null }
          Write-Host "Cleaning old log files..."
          $logs = @("$deployPath\uvicorn.log", "$deployPath\uvicorn_error.log")
          foreach ($f in $logs) { if (Test-Path $f) { Remove-Item $f -Force } }

      - name: Copy code to deploy folder
        shell: pwsh
        run: |
          $repoPath   = "$env:GITHUB_WORKSPACE"
          $deployPath = "D:\cd"
          $filesToCopy = Get-ChildItem -Path $repoPath -Recurse -ErrorAction SilentlyContinue | Where-Object {
            $_.Extension.ToLower() -eq ".py" -or $_.Name.ToLower() -eq "requirements.txt"
          }
          foreach ($file in $filesToCopy) {
            $relativePath = $file.FullName.Substring($repoPath.Length).TrimStart('\')
            $dest = Join-Path $deployPath $relativePath
            $destDir = Split-Path $dest
            if (-not (Test-Path $destDir)) { New-Item -ItemType Directory -Path $destDir -Force | Out-Null }
            Copy-Item $file.FullName -Destination $dest -Force
          }

      - name: Setup Python environment
        shell: pwsh
        run: |
          $deployPath = "D:\cd"
          $venvPath   = "$deployPath\venv"
          $pythonExe  = "C:\Users\CROMA\venv\Scripts\python.exe"

          # Create venv if not exists
          if (-not (Test-Path $venvPath)) {
            & $pythonExe -m venv $venvPath
          }

          # Use venv python
          $venvPython = "$venvPath\Scripts\python.exe"
          $env:PATH   = "$venvPath\Scripts;$env:PATH"

          # Install dependencies
          & $venvPython -m pip install --upgrade pip
          & $venvPython -m pip install -r "$deployPath\requirements.txt"

      - name: Run FastAPI
        shell: pwsh
        run: |
          $deployPath = "D:\cd"
          Start-Process python -ArgumentList "-m uvicorn main:app --host 0.0.0.0 --port 8000" `
            -WorkingDirectory $deployPath `
            -NoNewWindow `
            -RedirectStandardOutput "$deployPath\uvicorn.log" `
            -RedirectStandardError "$deployPath\uvicorn_error.log"

      - name: List deploy folder
        shell: pwsh
        run: Get-ChildItem "D:\cd" -Recurse
