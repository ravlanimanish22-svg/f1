name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # ================= Build & Test =================
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Mobifly2024
          POSTGRES_DB: fastapi
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install aiosqlite

      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:Mobifly2024@localhost:5432/fastapi
        run: pytest -v

  # ================= Deploy =================
  deploy:
    runs-on: self-hosted
    needs: build

    steps:
      - uses: actions/checkout@v3

      # Show workspace path
      - name: Show workspace path
        run: Write-Host "Workspace path: $env:GITHUB_WORKSPACE"

      # ---------------- Cleanup previous deployment ----------------
      - name: Cleanup previous deployment
        run: |
          $deployPath = "D:\cd"
          
          Write-Host "Stopping any running Python/uvicorn processes..."
          Get-Process python -ErrorAction SilentlyContinue | Stop-Process -Force
          
          Write-Host "Cleaning old log files..."
          $logFiles = @("$deployPath\uvicorn.log", "$deployPath\uvicorn_error.log")
          foreach ($file in $logFiles) {
              if (Test-Path $file) { Remove-Item $file -Force }
          }

      # Create deploy folder
      - name: Create deploy folder
        run: |
          $deployPath = "D:\cd"
          if (-Not (Test-Path $deployPath)) { New-Item -ItemType Directory -Path $deployPath }

      # Copy only .py and requirements.txt
      - name: Copy code to deploy folder
        run: |
          $repoPath = "$env:GITHUB_WORKSPACE"
          $deployPath = "D:\cd"
          $filesToCopy = Get-ChildItem -Path $repoPath -Recurse -ErrorAction SilentlyContinue | Where-Object {
              $_.Extension -eq ".py" -or $_.Name -eq "requirements.txt"
          }
          foreach ($file in $filesToCopy) {
              $relativePath = $file.FullName.Substring($repoPath.Length).TrimStart('\')
              $dest = Join-Path $deployPath $relativePath
              $destDir = Split-Path $dest
              if (-Not (Test-Path $destDir)) { New-Item -ItemType Directory -Path $destDir -Force }
              Copy-Item $file.FullName -Destination $dest -Force
          }

      # Create virtual environment and install dependencies
      - name: Setup Python environment
        run: |
          $deployPath = "D:\cd"
          python -m venv "$deployPath\venv"
          $env:PATH = "$deployPath\venv\Scripts;$env:PATH"
          python -m pip install --upgrade pip
          python -m pip install -r "$deployPath\requirements.txt"

      # Run FastAPI in background
      - name: Run FastAPI
        run: |
          $deployPath = "D:\cd"
          Start-Process python -ArgumentList "-m uvicorn main:app --host 0.0.0.0 --port 8000" -WorkingDirectory $deployPath -NoNewWindow -RedirectStandardOutput "$deployPath\uvicorn.log" -RedirectStandardError "$deployPath\uvicorn_error.log"

      # Verify deploy folder
      - name: List deploy folder
        run: Get-ChildItem "D:\cd" -Recurse
